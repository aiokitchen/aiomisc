# Translations template for aiomisc.
# Copyright (C) 2021
# This file is distributed under the same license as the aiomisc project.
# Dmitry Orlov <me@mosquito.su>, 2022.
msgid ""
msgstr ""
"Project-Id-Version:  14\n"
"Report-Msgid-Bugs-To: me@mosquito.su\n"
"POT-Creation-Date: 2021-12-14 22:58+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dmitry Orlov <me@mosquito.su>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/pytest.rst:2
msgid "Pytest plugin"
msgstr "Плагин для Pytest"

#: ../../source/pytest.rst:4
msgid "This package contains a plugin for pytest."
msgstr "Этот пакет содержит plugin для pytest."

#: ../../source/pytest.rst:7
msgid "Basic usage"
msgstr "Простой пример"

#: ../../source/pytest.rst:9
msgid "Simple usage example:"
msgstr "Простой пример использования:"

#: ../../source/pytest.rst:24
msgid "asynchronous fixture example:"
msgstr "пример асинхронной фикстуры:"

#: ../../source/pytest.rst:40
msgid ""
"In case you have to save an instance of an async fixture between tests, "
"the wrong solution is just changing the fixture scope. But why it "
"wouldn't work? That's because, in the base scenario, the ``loop`` fixture"
" creates a new event loop instance per test which will be closed after "
"test teardown. When you have to use an async fixture any caller of "
"``asyncio.get_event_loop()`` will get the current event loop instance "
"which will be closed and the next test will run in another event loop. So"
" the solution is to redefine the ``loop`` fixture with the required scope"
" and custom fixture with the required scope."
msgstr ""
"В случае, если вам необходимо сохранить экземпляр асинхронной фиксуры между "
"тестами, неправильным решением будет просто изменить scope фикстуры."
"Но почему это не сработает? Это связано с тем, что в базовом сценарии "
"фикстура ``loop`` создает новый экземпляр event-loop для каждого теста, и он "
"будет закрыт по завершении теста. Когда нужно использовать "
"асинхронную фикстуру, любой вызов ``asyncio.get_event_loop()`` вернет текущий "
"экземпляр event-loop, который будет закрыт, и следующий тест будет "
"выполняться в другом экземпляре event-loop."
"Таким образом, решение заключается в переопределении фикстуры ``loop`` "
"с требуемым scope и пользовательской фиктуры."

#: ../../source/pytest.rst:83
msgid "pytest markers"
msgstr "маркеры pytest"

#: ../../source/pytest.rst:85
msgid "Package contains some useful markers for pytest:"
msgstr "Пакет содержит несколько полезных маркеров для pytest:"

#: ../../source/pytest.rst:87
msgid ""
"``catch_loop_exceptions`` - uncaught event loop exceptions will failling "
"test."
msgstr ""
"``catch_loop_exceptions`` - непойманные исклбчения в event loop сломают "
"тест."

#: ../../source/pytest.rst:88
msgid ""
"``forbid_get_event_loop`` - forbids call ``asyncio.get_event_loop`` "
"during test case."
msgstr ""
"``forbid_get_event_loop`` - запрещает вызов ``asyncio.get_event_loop`` "
"при прогоне теста."

#: ../../source/pytest.rst:123
msgid "Passing default context"
msgstr "Передача контекста по умолчанию"

#: ../../source/pytest.rst:139
msgid "Testing services"
msgstr "Тестирование сервисов"

#: ../../source/pytest.rst:141
msgid "Redefine ``services`` fixture in your test module:"
msgstr "Переопределите фикстуру ``services`` в вашем тестовом модуле:"

#: ../../source/pytest.rst:157
msgid "Event loop policy overriding"
msgstr "Переопределение политики создания цикла событий"

#: ../../source/pytest.rst:175
msgid "Thread pool overriding"
msgstr "Переопределение пула потоков"

#: ../../source/pytest.rst:190
msgid "entrypoint arguments"
msgstr "агрументы entrypoint"

#: ../../source/pytest.rst:202
msgid "aiohttp test client"
msgstr "тестовый класс для aiohttp"

#: ../../source/pytest.rst:238
msgid "TCPProxy"
msgstr "TCPProxy"

#: ../../source/pytest.rst:240
msgid ""
"Simple TCP proxy for emulate network problems. Available as fixture "
"`tcp_proxy`"
msgstr ""
"Простой TCP proxy для эмуляции сетевых проблем. Доступен как фикстура "
"`tcp_proxy`"

#: ../../source/pytest.rst:243
msgid "Examples:"
msgstr "Примеры:"

