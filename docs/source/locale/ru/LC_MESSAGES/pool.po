# Translations template for aiomisc.
# Copyright (C) 2021
# This file is distributed under the same license as the aiomisc project.
# Dmitry Orlov <me@mosquito.su>, 2022.
msgid ""
msgstr ""
"Project-Id-Version:  14\n"
"Report-Msgid-Bugs-To: me@mosquito.su\n"
"POT-Creation-Date: 2022-12-29 11:36+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dmitry Orlov <me@mosquito.su>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/pool.rst:2
msgid "Abstract connection pool"
msgstr "Абстрактный пул соединений"

#: ../../source/pool.rst:4
msgid ""
"``aiomisc.PoolBase`` is an abstract class for implementing user-defined "
"connection pool."
msgstr ""
"``Aiomisc.PoolBase`` - абстрактный класс для реализации определяемого "
"пользователем пула соединений."

#: ../../source/pool.rst:8
msgid "Example for ``aioredis``:"
msgstr "Пример для ``aioredis``:"

#: ../../source/pool.rst:10
msgid ""
"import asyncio\n"
"import aioredis\n"
"import aiomisc\n"
"\n"
"\n"
"class RedisPool(aiomisc.PoolBase):\n"
"    def __init__(self, uri, maxsize=10, recycle=60):\n"
"        super().__init__(maxsize=maxsize, recycle=recycle)\n"
"        self.uri = uri\n"
"\n"
"    async def _create_instance(self):\n"
"        return await aioredis.create_redis(self.uri)\n"
"\n"
"    async def _destroy_instance(self, instance: aioredis.Redis):\n"
"        instance.close()\n"
"        await instance.wait_closed()\n"
"\n"
"    async def _check_instance(self, instance: aioredis.Redis):\n"
"        try:\n"
"            await asyncio.wait_for(instance.ping(1), timeout=0.5)\n"
"        except:\n"
"            return False\n"
"\n"
"        return True\n"
"\n"
"\n"
"async def main():\n"
"    pool = RedisPool(\"redis://localhost\")\n"
"    async with pool.acquire() as connection:\n"
"        await connection.set(\"foo\", \"bar\")\n"
"\n"
"    async with pool.acquire() as connection:\n"
"        print(await connection.get(\"foo\"))\n"
"\n"
"\n"
"asyncio.run(main())"
msgstr ""
