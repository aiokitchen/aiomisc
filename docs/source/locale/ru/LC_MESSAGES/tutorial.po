# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Dmitry Orlov
# This file is distributed under the same license as the aiomisc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: aiomisc 16.1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-02 10:59+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/tutorial.rst:2
msgid "Tutorial"
msgstr "Учебник"

#: ../../source/tutorial.rst:5
msgid ""
"``aiomisc`` - this is a collection of utilities into one library that "
"help you write asynchronous services."
msgstr ""
"``aiomisc`` - это набор утилит в одной библиотеке, которые помогают вам "
"писать асинхронные сервисы."

#: ../../source/tutorial.rst:9
msgid ""
"The main approach in this library is to split your program into "
"independent services that can work competitively in asynchronous mode. "
"The library also provides a set of ready-to-use services with pre-written"
" start and stop logic."
msgstr ""
"Основным подходом в этой библиотеке является разделение вашей программы "
"на независимые сервисы, которые могут работать конкурентно в асинхронном "
"режиме. Библиотека также предоставляет набор готовых к использованию "
"сервисов с заранее написанной логикой запуска и остановки."

#: ../../source/tutorial.rst:13
msgid ""
"The vast majority of functions and classes are written in such a way that"
" they can be used in a program that was not originally designed according"
" to the principles outlined in this manual. This means that if you don't "
"plan to modify your code too much, but only use a few useful functions or"
" classes for you, then everything should work."
msgstr ""
"Подавляющее большинство функций и классов написаны таким образом, что их "
"можно использовать в программе, которая изначально не была разработана в "
"соответствии с принципами, изложенными в этом руководстве. Так что если "
"вы не планируете слишком сильно переписывать свой код, а хотите "
"использовать только несколько полезных для вас функций или классов, то "
"все должно работать."

#: ../../source/tutorial.rst:21
msgid "Services"
msgstr "Сервисы"

#: ../../source/tutorial.rst:23
msgid ""
"If you want to run a tcp or web server, then you will have to write "
"something like this:"
msgstr ""
"Если вы хотите запустить tcp или веб-сервер, то вам придется написать "
"что-то вроде этого:"

#: ../../source/tutorial.rst:42
msgid ""
"In order to start or stop an async programs, usually using function "
"``asyncio.run(example_async_func())`` which available since Python 3.7, "
"the function takes an instance of a coroutine and terminates all "
"incomplete tasks after it completes. To continue executing the code "
"indefinitely, you can perform the following trick:"
msgstr ""
"Для того, чтобы запустить или остановить асинхронные программы, обычно "
"используется функция ``asyncio.run(example_async_func())``, которая "
"доступна начиная с Python 3.7, функция принимает экземпляр сопрограммы и "
"завершает все незавершенные задачи после ее завершения. Чтобы продолжить "
"выполнение кода вечно, вы можете применить следующий трюк:"

#: ../../source/tutorial.rst:66
msgid ""
"If the user presses `Ctrl+C`, the program simply terminates, but if you "
"want to explicitly free up some resources, for example, close database "
"connections or rolling back all incomplete transactions, then you have to"
" do something like this:"
msgstr ""
"Если пользователь нажимает `Ctrl + C`, программа просто завершается, но "
"если вы хотите явно освободить некоторые ресурсы, например, закрыть "
"соединения с базой данных или откатить все незавершенные транзакции, то "
"вам нужно сделать что-то вроде этого:"

#: ../../source/tutorial.rst:96
msgid ""
"This solution wins because it is implemented without any external "
"libraries. When your program starts to grow, you will probably want to "
"optimize the startup time in a simple way, namely to do all "
"initialization competitively. At first glance it seems that this code "
"will solve the problem:"
msgstr ""
"Это хорошее решение, потому что оно реализовано без каких-либо внешних "
"библиотек. Но когда ваша программа начнет расти, вы, вероятно, захотите "
"оптимизировать время запуска простым способом, а именно выполнить всю "
"инициализацию конкурентно. На первый взгляд кажется, что этот код решит "
"проблему"

#: ../../source/tutorial.rst:128
msgid ""
"But if suddenly some part of the initialization does not go according to "
"plan, then you somehow have to figure out what exactly went wrong, so "
"with concurrent execution, the code will no longer be as simple as in "
"this example."
msgstr ""
"Но если вдруг какая-то часть инициализации пойдет не по плану, то вам "
"каким-то образом придется выяснить, что именно пошло не так, поэтому при "
"параллельном выполнении код уже не будет таким простым, как в этом "
"примере."

#: ../../source/tutorial.rst:132
msgid ""
"And in order to somehow organize the code, you should make a separate "
"function that will contain the ``try/except/finally`` block and contain "
"error handling."
msgstr ""
"И для того, чтобы как-то упорядочить код, вы должны сделать отдельную "
"функцию, которая будет содержать блок `try/except/finally` и содержать "
"обработку ошибок."

#: ../../source/tutorial.rst:172
msgid ""
"And now if the user presses Ctrl+C, you need to describe the shutdown "
"logic again, but already in the ``except`` block."
msgstr ""
"И теперь, если пользователь нажимает Ctrl+C, вам нужно снова описать "
"логику завершения работы, но уже в блоке ``except``."

#: ../../source/tutorial.rst:175
msgid ""
"In order to describe the logic of starting and stopping in one place, as "
"well as testing in one single way, and the abstraction ``Service`` is "
"exists."
msgstr ""
"Для того, чтобы описать логику запуска и остановки в одном месте, а также"
" тестирования одним-единственным способом, и существует абстракция "
"``Сервис``."

#: ../../source/tutorial.rst:178
msgid ""
"The service is an abstract base class in which you need to implement the "
"``start()`` method and not necessarily the ``stop()`` method."
msgstr ""
"Сервис представляет из себя абстрактный базовый класс, в котором нужно "
"реализовать метод ``start()`` и не обязательно метод ``stop()``"

#: ../../source/tutorial.rst:181
msgid ""
"The service can operate in two modes. The first is when the ``start()`` "
"method runs forever, then you do not need to implement a ``stop()``, but "
"you need to report that the initialization is successfully completed by "
"setting ``self.start_event.set()``."
msgstr ""
"Сервис может работать в двух режимах. Первый это когда метод старт "
"выполняется вечно, тогда не нужно реализовывать стоп, но нужно сообщить "
"что инициализация успешно закончена с помощью ``self.start_event.set()``."

#: ../../source/tutorial.rst:202
msgid ""
"In this case, stopping the service will consist in the completion of the "
"coroutine that was created by ``start()``."
msgstr ""
"В этом случае остановка сервиса будет заключаться в завершении "
"сопрограммы которую породила ``start()``"

#: ../../source/tutorial.rst:206
msgid ""
"The second method is an explicit description of the way to ``start()`` "
"and ``stop()``."
msgstr ""
"Второй способ это явное описание способа запуска и остановки реализовав "
"методы ``start()`` и ``stop()``"

#: ../../source/tutorial.rst:226
msgid "In this case, the service will be started and stopped once."
msgstr "В этом случае запуск и остановка сервиса будут выполнены однократно."

#: ../../source/tutorial.rst:230
msgid "``entrypoint``"
msgstr ""

#: ../../source/tutorial.rst:232
msgid ""
"So the services are declared, what's next? ``asyncio.run`` does not know "
"how to work with them, it has not become easier to call them manually, "
"what can I offer here?"
msgstr ""
"Итак сервисы описаны, что дальше? ``asyncio.run`` не умеет с ними "
"работать, вызывать их вручную не стало проще, что тут можно предложить?"

#: ../../source/tutorial.rst:236
msgid ""
"Probably the most magical and complex code in the library is "
"``entrypoint``. By the way, it has been tested quite well. Initially, the"
" idea of ``entrypoint`` was to do a lot of routine for me, setting up "
"logs, setting up a thread pool, well, starting and stopping services "
"correctly."
msgstr ""
"Наверное самый магический и сложный код в библиотеке это ``entrypoint``. "
"К слову, протестирован он достаточно хорошо. Изначально идеей "
"``entrypoint`` было сделать много рутины за меня, настройка логов, "
"настройка пула потоков, ну и запуск и корректная остановка сервисов."

#: ../../source/tutorial.rst:241
msgid "Let me show you an example:"
msgstr ""

#: ../../source/tutorial.rst:257
msgid ""
"In this example, we launch the two services described above and continue "
"execution until the user interrupts it. Further, thanks to the context "
"manager, we correctly terminate all instances of services."
msgstr ""
"В этом примере мы запускаем два сервиса, описанных выше, и продолжаем "
"выполнение до тех пор пока пользователь его не прервет. Далее благодаря "
"контекстному менеджеру, мы корректно завершаем все экземпляры сервисов."

#: ../../source/tutorial.rst:261
msgid ""
"I mentioned that I wanted to remove a lot of routine, let's look at the "
"same example, just explicitly pass all the default parameters to the "
"``entrypoint`` explicitly."
msgstr ""
"Я упоминал что я хотел убрать много рутины, давайте посмотрим на тот-же "
"пример только передадим явно все параметры по умолчанию в ``entrypoint``."

#: ../../source/tutorial.rst:288
msgid ""
"Let's not describe on what each parameter does. But in general, "
"``entrypoint`` created an event-loop, a thread pool with 4 threads, set "
"it for the current event-loop, configured a logger with colored logs and "
"buffered output, and launched two services."
msgstr ""
"Давайте не будем останавливаться на том, чего не делает каждый параметр. "
"Но в целом, ``entrypoint`` создала цикл событий, пул потоков с 4 "
"потоками, настроила его для текущего цикла событий, настроил логгер с "
"\"цветными\" буферизованным выводом и запустила два сервиса."

#: ../../source/tutorial.rst:293
msgid ""
"You can also run the ``entrypoint`` without services, just configure "
"logging and so on.:"
msgstr ""
"Также вы можете запустить entrypoint без сервисов, просто "
"сконфигурировать логирование и прочее:"

#: ../../source/tutorial.rst:312
msgid ""
"It is also worth paying attention to the ``aiomisc.run`` shortcut, which "
"is similar in its purpose to ``asyncio.run`` while supporting the start "
"and stop of services and so on."
msgstr ""
"Еще стоит обратить внимание на ``aiomisc.run`` который похож по своему "
"назначению на ``asyncio.run`` при этом поддерживает запуск и остановку "
"сервисов и прочее."

#: ../../source/tutorial.rst:342
msgid ""
"As I mentioned earlier, the library contains a lots of already realized "
"abstract services that you can use in your project by simply realize "
"several methods."
msgstr ""
"Как я и упоминал ранее библиотека содержит большое количество абстрактных"
" сервисов, которые вы можете использовать в своем проекте, просто "
"реализовав несколько методов."

#: ../../source/tutorial.rst:346
msgid ""
"A full list of services and theirs usage examples can be found on the "
":doc:`Services page </services>`."
msgstr ""
"Полный список сервисов и примеры их использования можно найти на странице "
":doc:`Сервисы </services>`."

