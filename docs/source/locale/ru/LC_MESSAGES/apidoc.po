# Translations template for aiomisc.
# Copyright (C) 2021
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <me@mosquito.su>, 2021.

#: ../../source/apidoc.rst:2
msgid "API Reference"
msgstr "Описание API"

#: aiomisc.periodic.PeriodicCallback:3 of
msgid ""
"When the periodic function executes longer then execution interval a next"
" call will be skipping and warning will be logged."
msgstr ""
"Когда периодическая функция выполняется дольше, чем интервал выполнения, "
"следующий вызов будет пропущен, и будет залогировано предупреждение."

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:1
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:1 of
msgid "Clean-up the resources associated with the Executor."
msgstr "Очищает ресурсы, связанные с Executor."

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:3
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:3 of
msgid ""
"It is safe to call this method several times. Otherwise, no other methods"
" can be called after this one."
msgstr ""
"Этот метод можно безопасно вызывать несколько раз. В противном случае "
"после этого нельзя будет вызывать другие методы."

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:11
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "Args:"
msgstr "Аргументы:"

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:8
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid "wait: If True then shutdown will not return until all running"
msgstr ""
"wait: Если True то функция не завершится пока выключение не будет "
"произведено"

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:8
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid ""
"futures have finished executing and the resources used by the executor "
"have been reclaimed."
msgstr "исполнение Future завершено, а ресурсы, используемые executor, возвращены."

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:11
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "cancel_futures: If True then shutdown will cancel all pending"
msgstr ""
"cancel_futures: Если True то все отменяются все не завершенные"

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:11
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "futures. Futures that are completed or running will not be cancelled."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.submit:1
#: aiomisc.thread_pool.ThreadPoolExecutor.submit:1 of
msgid "Submit blocking function to the pool"
msgstr "Отправляет блокирующуюся функцию в пул"

#: aiomisc.backoff.asyncbackoff:1 of
msgid ""
"Patametric decorator that ensures that ``attempt_timeout`` and "
"``deadline`` time limits are met by decorated function."
msgstr ""
"Параметрический декоратор, который гарантирует, что ограничение "
"``attempt_timeout`` и ``deadline`` соблюдены декорируемой функцией."

#: aiomisc.backoff.asyncbackoff:4 of
msgid ""
"In case of exception function will be called again with similar arguments"
" after ``pause`` seconds."
msgstr ""
"В случае возникновения исключения функция будет вызвана снова с "
"аналогичными аргументами через ``pause`` секунд."

#: aiomisc.backoff.asyncbackoff aiomisc.utils.bind_socket
#: aiomisc.utils.cancel_tasks aiomisc.utils.select of
msgid "Parameters"
msgstr "Параметры"

#: aiomisc.backoff.asyncbackoff:7 of
msgid "is maximum execution time for one execution attempt."
msgstr "это максимальное время выполнения для одной попытки выполнения."

#: aiomisc.backoff.asyncbackoff:9 of
msgid "is maximum execution time for all execution attempts."
msgstr "это максимальное время выполнения для всех попыток выполнения."

#: aiomisc.backoff.asyncbackoff:10 of
msgid "is time gap between execution attempts."
msgstr "это пауза между попытками выполнениями."

#: aiomisc.backoff.asyncbackoff:11 of
msgid "retrying when this exceptions was raised."
msgstr "повторять только если брошены перечисленные тут исключения."

#: aiomisc.backoff.asyncbackoff:12 of
msgid "similar as exc but keyword only."
msgstr "тоже самое что и exc но это именованный аргумент."

#: aiomisc.backoff.asyncbackoff:13 of
msgid "is maximum count of execution attempts (>= 1)."
msgstr "это максимальныое количество попыток исполнения (>= 1)."

#: aiomisc.backoff.asyncbackoff:14 of
msgid "is a predicate function which can decide by a given"
msgstr ""
"это функция-предикат, которая может принимать решение нужно ли продолжать"
" попытки"

#: aiomisc.utils.awaitable:1 of
msgid ""
"Decorator wraps function and returns a function which returns awaitable "
"object. In case than a function returns a future, the original future "
"will be returned. In case then the function returns a coroutine, the "
"original coroutine will be returned. In case than function returns non-"
"awaitable object, it's will be wrapped to a new coroutine which just "
"returns this object. It's useful when you don't want to check function "
"result before use it in ``await`` expression."
msgstr ""
"Декоратор оборачивает функцию и возвращает функцию, которая возвращает "
"awaitable объект. В случае, если функция возвращает ``Future``, будет "
"возвращено исходная ``Future``. В случае, если функция возвращает "
"корутину, будет возвращена исходная корутина. В случае, если функция "
"возвращает не awaitable объект, он будет перенесен в новую корутину, "
"которая просто возвращает этот объект. Это полезно, когда вы не хотите "
"проверять результат функции перед использованием его в выражении "
"``await``."

#: aiomisc.utils.bind_socket:1 of
msgid ""
"Bind socket and set ``setblocking(False)`` for just created socket. This "
"detects ``address`` format and select socket family automatically."
msgstr ""
"Свяжите сокет и установите ``setblocking (False)`` для только что "
"созданного сокета. Это определяет формат ``адреса`` и автоматически "
"выбирает тип сокета (IPv4 или IPv6)."

#: aiomisc.utils.bind_socket:4 of
msgid "which will be passed to stdlib's socket constructor (optional)"
msgstr "который будет передан конструктору сокета stdlib (необязательно)"

#: aiomisc.utils.bind_socket:5 of
msgid "bind address"
msgstr "биндит адрес"

#: aiomisc.utils.bind_socket:6 of
msgid "bind port"
msgstr "биндит порт"

#: aiomisc.utils.bind_socket:7 of
msgid "Tuple of pairs which contain socket option to set and the option value."
msgstr ""
"Кортэж пар, содержащих параметр сокета, который необходимо установить, и "
"значение этого параметра."

#: aiomisc.utils.bind_socket:9 of
msgid "set socket.SO_REUSEADDR"
msgstr "устанавливает socket.SO_REUSEADDR"

#: aiomisc.utils.bind_socket:10 of
msgid "set socket.SO_REUSEPORT"
msgstr "устанавливает socket.SO_REUSEPORT"

#: aiomisc.utils.bind_socket:11 of
msgid "protocol name which will be logged after binding"
msgstr "название протокола, оно будет залогировано после биндинга"

#: aiomisc.utils.bind_socket of
msgid "Returns"
msgstr "Возвращаемое значение"

#: aiomisc.utils.bind_socket:12 of
msgid "socket.socket"
msgstr "socket.socket"

#: aiomisc.utils.cancel_tasks:1 of
msgid "All passed tasks will be cancelled and a new task will be returned."
msgstr "Все переданные задачи будут отменены. Функция вернет новую задачу."

#: aiomisc.utils.cancel_tasks:3 of
msgid "tasks which will be cancelled"
msgstr "отменяемые задачи"

#: aiomisc.utils.chunk_list:1 of
msgid "Split list or generator by chunks with fixed maximum size."
msgstr ""
"Разделяет список или генератор по пачкам с фиксированным максимальным "
"размером."

#: aiomisc.utils.select:1 of
msgid "awaitable objects"
msgstr "awaitable объект"

#: aiomisc.utils.select:2 of
msgid "if True exception will not be raised just returned as result"
msgstr "Если True то исключение не боросается а возвращается как результат"

#: aiomisc.utils.select:4 of
msgid "cancel unfinished coroutines (default True)"
msgstr "отменять ли незавершенные корутины (по умолчанию True)"

#: aiomisc.utils.select:5 of
msgid "execution timeout"
msgstr "таймаут выполнения"

#: aiomisc.utils.select:6 of
msgid ""
"when False and ``cancel=True``, unfinished coroutines will be cancelled "
"in the background."
msgstr ""
"Если False и ``cancel=True``, незавершенные корутины будут отменены в "
"фоне."

#: aiomisc.utils.select:8 of
msgid "event loop"
msgstr "event loop"

#: aiomisc.utils.shield:1 of
msgid "Simple and useful decorator for wrap the coroutine to `asyncio.shield`."
msgstr ""
"Простой и полезный декоратор для переноса сопрограммы в "
"``asyncio.shield``."

