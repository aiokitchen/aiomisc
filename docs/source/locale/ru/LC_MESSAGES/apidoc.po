# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Dmitry Orlov
# This file is distributed under the same license as the aiomisc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiomisc 11.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-01 00:23+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/apidoc.rst:2
msgid "API Reference"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreakerStates:1
#: aiomisc.circuit_breaker.CounterKey:1 of
msgid "An enumeration."
msgstr ""

#: aiomisc.cron.CronCallback:3 of
msgid ""
"When the cron function executes longer then execution interval a next "
"call will be skipping and warning will be logged."
msgstr ""

#: aiomisc.periodic.PeriodicCallback:3 of
msgid ""
"When the periodic function executes longer then execution interval a next"
" call will be skipping and warning will be logged."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:1
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:1 of
msgid "Clean-up the resources associated with the Executor."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:3
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:3 of
msgid ""
"It is safe to call this method several times. Otherwise, no other methods"
" can be called after this one."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:8
#: aiomisc.thread_pool.ThreadPoolExecutor:9
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid "Args:"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:8
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid "wait: If True then shutdown will not return until all running"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:8
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid ""
"futures have finished executing and the resources used by the executor "
"have been reclaimed."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.submit:1
#: aiomisc.thread_pool.ThreadPoolExecutor.submit:1 of
msgid "Submits a callable to be executed with the given arguments."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.submit:3
#: aiomisc.thread_pool.ThreadPoolExecutor.submit:3 of
msgid ""
"Schedules the callable to be executed as fn(*args, **kwargs) and returns "
"a Future instance representing the execution of the callable."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.submit:6
#: aiomisc.thread_pool.ThreadPoolExecutor.submit:6 of
msgid "Returns:"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.submit:7
#: aiomisc.thread_pool.ThreadPoolExecutor.submit:7 of
msgid "A Future representing the given call."
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor:1 of
msgid "Initializes a new ThreadPoolExecutor instance."
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor:4 of
msgid "max_workers: The maximum number of threads that can be used to"
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor:5 of
msgid "execute the given calls."
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor:6 of
msgid ""
"thread_name_prefix: An optional name prefix to give our threads. "
"initializer: A callable used to initialize worker threads. initargs: A "
"tuple of arguments to pass to the initializer."
msgstr ""

#: aiomisc.thread_pool.WorkItem:1 aiomisc.thread_pool.WorkItemBase:1 of
msgid "Create new instance of WorkItemBase(func, args, kwargs, future, loop)"
msgstr ""

#: aiomisc.thread_pool.WorkItemBase.args:1 of
msgid "Alias for field number 1"
msgstr ""

#: aiomisc.thread_pool.WorkItemBase.func:1 of
msgid "Alias for field number 0"
msgstr ""

#: aiomisc.thread_pool.WorkItemBase.future:1 of
msgid "Alias for field number 3"
msgstr ""

#: aiomisc.thread_pool.WorkItemBase.kwargs:1 of
msgid "Alias for field number 2"
msgstr ""

#: aiomisc.thread_pool.WorkItemBase.loop:1 of
msgid "Alias for field number 4"
msgstr ""

#: aiomisc.utils.bind_socket of
msgid "Parameters"
msgstr ""

#: aiomisc.utils.bind_socket:1 of
msgid "which will be passed to stdlib's socket constructor (optional)"
msgstr ""

#: aiomisc.utils.bind_socket:2 of
msgid "bind address"
msgstr ""

#: aiomisc.utils.bind_socket:3 of
msgid "bind port"
msgstr ""

#: aiomisc.utils.bind_socket:4 of
msgid "Tuple of pairs which contain socket option to set and the option value."
msgstr ""

#: aiomisc.utils.bind_socket:6 of
msgid "set socket.SO_REUSEADDR"
msgstr ""

#: aiomisc.utils.bind_socket:7 of
msgid "set socket.SO_REUSEPORT"
msgstr ""

#: aiomisc.utils.bind_socket:8 of
msgid "protocol name which will be logged after binding"
msgstr ""

#: aiomisc.utils.bind_socket of
msgid "Returns"
msgstr ""

#: aiomisc.utils.bind_socket:9 of
msgid "socket.socket"
msgstr ""

#: aiomisc.utils.chunk_list:1 of
msgid "Split list or generator by chunks with fixed maximum size."
msgstr ""

#: aiomisc.utils.shield:1 of
msgid "Simple and useful decorator for wrap the coroutine to `asyncio.shield`."
msgstr ""

