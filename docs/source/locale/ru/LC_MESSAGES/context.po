# Translations template for aiomisc.
# Copyright (C) 2021
# This file is distributed under the same license as the aiomisc project.
# Dmitry Orlov <me@mosquito.su>, 2022.
msgid ""
msgstr ""
"Project-Id-Version:  14\n"
"Report-Msgid-Bugs-To: me@mosquito.su\n"
"POT-Creation-Date: 2022-12-29 11:36+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dmitry Orlov <me@mosquito.su>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/context.rst:2
msgid "Context"
msgstr "Контекст"

#: ../../source/context.rst:4
msgid ""
"Services can require each other's data. In this case, you should use "
"``Context``."
msgstr ""
"Иногда сервисы должны запрашивать данные друг друга. В этом случае вам "
"следует использовать «Контекст»."

#: ../../source/context.rst:6
msgid "``Context`` is a repository associated with the running ``entrypoint``."
msgstr ""
"``Context`` по своей сути это репозиторий ассоциированный с запущенным "
"``entrypoint``."

#: ../../source/context.rst:8
msgid ""
"``Context``-object will be created when ``entrypoint`` starts and linked "
"to the running event loop."
msgstr ""
"Экземпляр класса ``Context`` создается в ``entrypoint`` запускается и "
"ассоциируется с запущенным event loop."

#: ../../source/context.rst:11
msgid ""
"Cross-dependent services might await or set each other's data via the "
"context."
msgstr ""
"Взаимозависимые сервисы могут ожидать или устанавливать данные друг друга"
" через контекст."

#: ../../source/context.rst:13
msgid ""
"For service instances ``self.context`` is available since ``entrypoint`` "
"started. In other cases ``get_context()`` function returns current "
"context."
msgstr ""
"Для сервисов контекст доступн как ``self.context`` с момента запуска "
"Entrypoint. В других случаях функция ``get_context()`` возвращает текущий"
" контекст."

#: ../../source/context.rst:17
msgid ""
"import asyncio\n"
"from random import random, randint\n"
"\n"
"from aiomisc import entrypoint, get_context, Service\n"
"\n"
"\n"
"class LoggingService(Service):\n"
"    async def start(self):\n"
"        context = get_context()\n"
"\n"
"        wait_time = await context['wait_time']\n"
"\n"
"        print('Wait time is', wait_time)\n"
"        self.start_event.set()\n"
"\n"
"        while True:\n"
"            print('Hello from service', self.name)\n"
"            await asyncio.sleep(wait_time)\n"
"\n"
"\n"
"class RemoteConfiguration(Service):\n"
"    async def start(self):\n"
"        # querying from remote server\n"
"        await asyncio.sleep(random())\n"
"\n"
"        self.context['wait_time'] = randint(1, 5)\n"
"\n"
"\n"
"services = (\n"
"    LoggingService(name='#1'),\n"
"    LoggingService(name='#2'),\n"
"    LoggingService(name='#3'),\n"
"    RemoteConfiguration()\n"
")\n"
"\n"
"with entrypoint(*services) as loop:\n"
"    pass"
msgstr ""
"import asyncio\n"
"from random import random, randint\n"
"\n"
"from aiomisc import entrypoint, get_context, Service\n"
"\n"
"\n"
"class LoggingService(Service):\n"
"    async def start(self):\n"
"        context = get_context()\n"
"\n"
"        wait_time = await context['wait_time']\n"
"\n"
"        print('Wait time is', wait_time)\n"
"        self.start_event.set()\n"
"\n"
"        while True:\n"
"            print('Hello from service', self.name)\n"
"            await asyncio.sleep(wait_time)\n"
"\n"
"\n"
"class RemoteConfiguration(Service):\n"
"    async def start(self):\n"
"        # Понарошку делаем запрос с удаленного сервера\n"
"        await asyncio.sleep(random())\n"
"\n"
"        self.context['wait_time'] = randint(1, 5)\n"
"\n"
"\n"
"services = (\n"
"    LoggingService(name='#1'),\n"
"    LoggingService(name='#2'),\n"
"    LoggingService(name='#3'),\n"
"    RemoteConfiguration()\n"
")\n"
"\n"
"with entrypoint(*services) as loop:\n"
"    pass"

#: ../../source/context.rst:61
msgid ""
"It's not a silver bullet. In base case services can be configured by "
"passing kwargs to the service ``__init__`` method."
msgstr ""
"Это не панацея. В простом случае службы можно настроить, передав kwargs в"
" ``__init__``."
