# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Dmitry Orlov
# This file is distributed under the same license as the aiomisc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiomisc 14.0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 13:32+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/aiomisc.rst:2
msgid "API reference"
msgstr ""

#: ../../source/aiomisc.rst:5
msgid "Subpackages"
msgstr ""

#: ../../source/aiomisc.rst:15
msgid "Submodules"
msgstr ""

#: aiomisc.backoff.asyncbackoff:1 of
msgid ""
"Patametric decorator that ensures that ``attempt_timeout`` and "
"``deadline`` time limits are met by decorated function."
msgstr ""

#: aiomisc.backoff.asyncbackoff:4 of
msgid ""
"In case of exception function will be called again with similar arguments"
" after ``pause`` seconds."
msgstr ""

#: aiomisc.backoff.asyncbackoff aiomisc.circuit_breaker.CircuitBreaker
#: aiomisc.entrypoint.Entrypoint aiomisc.utils.bind_socket
#: aiomisc.utils.cancel_tasks aiomisc.utils.create_default_event_loop
#: aiomisc.utils.select aiomisc.worker_pool.pool.WorkerPool
#: aiomisc.worker_pool.pool.WorkerPool.create_task of
msgid "Parameters"
msgstr ""

#: aiomisc.backoff.asyncbackoff:7 of
msgid "is maximum execution time for one execution attempt."
msgstr ""

#: aiomisc.backoff.asyncbackoff:9 of
msgid "is maximum execution time for all execution attempts."
msgstr ""

#: aiomisc.backoff.asyncbackoff:10 of
msgid "is time gap between execution attempts."
msgstr ""

#: aiomisc.backoff.asyncbackoff:11 of
msgid "retrying when this exceptions was raised."
msgstr ""

#: aiomisc.backoff.asyncbackoff:12 of
msgid "similar as exc but keyword only."
msgstr ""

#: aiomisc.backoff.asyncbackoff:13 of
msgid "is maximum count of execution attempts (>= 1)."
msgstr ""

#: aiomisc.backoff.asyncbackoff:14 of
msgid "is a predicate function which can decide by a given"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:1 aiomisc.context.Context:1
#: aiomisc.cron.CronCallback:1 aiomisc.entrypoint.Entrypoint:1
#: aiomisc.io.AsyncBytesFileIOBase:1 aiomisc.io.AsyncFileIOBase:1
#: aiomisc.io.AsyncTextFileIOBase:1 aiomisc.periodic.PeriodicCallback:1
#: aiomisc.service.base.Service:1 aiomisc.signal.Signal:1
#: aiomisc.thread_pool.CoroutineWaiter:1 aiomisc.utils.SelectResult:1
#: aiomisc.worker_pool.pool.WorkerPool:1 of
msgid "Bases: :class:`object`"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:1 of
msgid ""
"Circuit Breaker pattern implementation. The class instance collects call "
"statistics through the ``call`` or ``call async`` methods."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:4 of
msgid ""
"The state machine has three states: * ``CircuitBreakerStates.PASSING`` * "
"``CircuitBreakerStates.BROKEN`` * ``CircuitBreakerStates.RECOVERING``"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:9 of
msgid ""
"In passing mode all results or exceptions will be returned as is. "
"Statistic collects for each call."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:12 of
msgid ""
"In broken mode returns exception ``CircuitBroken`` for each call. "
"Statistic doesn't collecting."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:15 of
msgid ""
"In recovering mode the part of calls is real function calls and "
"remainings raises ``CircuitBroken``. The count of real calls grows "
"exponentially in this case but when 20% (by default) will be failed the "
"state returns to broken state."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:20 of
msgid ""
"Failed to success calls ratio. The state might be changed if ratio will "
"reach given value within ``response time`` (in seconds). Value between "
"0.0 and 1.0."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:24 of
msgid "Time window to collect statistics (seconds)"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:25 of
msgid ""
"Only this exceptions will affect ratio. Base class  ``Exception`` used by"
" default."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:27 of
msgid "minimal time in recovery state (seconds)"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:28 of
msgid "minimal time in broken state (seconds)"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:29 of
msgid "minimum time in passing state (seconds)"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreakerStates:1
#: aiomisc.circuit_breaker.CounterKey:1 of
msgid "Bases: :class:`enum.IntEnum`"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreakerStates:1
#: aiomisc.circuit_breaker.CounterKey:1 of
msgid "An enumeration."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBroken:1 of
msgid "Bases: :class:`Exception`"
msgstr ""

#: aiomisc.cron.CronCallback:3 of
msgid ""
"When the cron function executes longer then execution interval a next "
"call will be skipping and warning will be logged."
msgstr ""

#: aiomisc.entrypoint.Entrypoint:1 of
msgid "set debug to event loop"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:2 of
msgid "loop"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:3 of
msgid "Service instances which will be starting."
msgstr ""

#: aiomisc.entrypoint.Entrypoint:4 of
msgid "thread pool size"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:5 of
msgid "Logging level which will be configured"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:6 of
msgid "Logging format which will be configures"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:7 of
msgid "Buffer size for logging"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:8 of
msgid "interval in seconds for flushing logs"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:9 of
msgid "if False do not configure logging"
msgstr ""

#: aiomisc.io.AsyncBytesFileIO:1 of
msgid ""
"Bases: :class:`aiomisc.io.AsyncFileIOBase`, "
":class:`aiomisc.io.AsyncBytesFileIOBase`"
msgstr ""

#: io.open:1 of
msgid "Open file and return a stream.  Raise OSError upon failure."
msgstr ""

#: io.open:3 of
msgid ""
"file is either a text or byte string giving the name (and the path if the"
" file isn't in the current working directory) of the file to be opened or"
" an integer file descriptor of the file to be wrapped. (If a file "
"descriptor is given, it is closed when the returned I/O object is closed,"
" unless closefd is set to False.)"
msgstr ""

#: io.open:9 of
msgid ""
"mode is an optional string that specifies the mode in which the file is "
"opened. It defaults to 'r' which means open for reading in text mode.  "
"Other common values are 'w' for writing (truncating the file if it "
"already exists), 'x' for creating and writing to a new file, and 'a' for "
"appending (which on some Unix systems, means that all writes append to "
"the end of the file regardless of the current seek position). In text "
"mode, if encoding is not specified the encoding used is platform "
"dependent: locale.getpreferredencoding(False) is called to get the "
"current locale encoding. (For reading and writing raw bytes use binary "
"mode and leave encoding unspecified.) The available modes are:"
msgstr ""

#: io.open:21 of
msgid "Character"
msgstr ""

#: io.open:21 of
msgid "Meaning"
msgstr ""

#: io.open:23 of
msgid "'r'"
msgstr ""

#: io.open:23 of
msgid "open for reading (default)"
msgstr ""

#: io.open:24 of
msgid "'w'"
msgstr ""

#: io.open:24 of
msgid "open for writing, truncating the file first"
msgstr ""

#: io.open:25 of
msgid "'x'"
msgstr ""

#: io.open:25 of
msgid "create a new file and open it for writing"
msgstr ""

#: io.open:26 of
msgid "'a'"
msgstr ""

#: io.open:26 of
msgid "open for writing, appending to the end of the file if it exists"
msgstr ""

#: io.open:27 of
msgid "'b'"
msgstr ""

#: io.open:27 of
msgid "binary mode"
msgstr ""

#: io.open:28 of
msgid "'t'"
msgstr ""

#: io.open:28 of
msgid "text mode (default)"
msgstr ""

#: io.open:29 of
msgid "'+'"
msgstr ""

#: io.open:29 of
msgid "open a disk file for updating (reading and writing)"
msgstr ""

#: io.open:30 of
msgid "'U'"
msgstr ""

#: io.open:30 of
msgid "universal newline mode (deprecated)"
msgstr ""

#: io.open:33 of
msgid ""
"The default mode is 'rt' (open for reading text). For binary random "
"access, the mode 'w+b' opens and truncates the file to 0 bytes, while "
"'r+b' opens the file without truncation. The 'x' mode implies 'w' and "
"raises an `FileExistsError` if the file already exists."
msgstr ""

#: io.open:38 of
msgid ""
"Python distinguishes between files opened in binary and text modes, even "
"when the underlying operating system doesn't. Files opened in binary mode"
" (appending 'b' to the mode argument) return contents as bytes objects "
"without any decoding. In text mode (the default, or when 't' is appended "
"to the mode argument), the contents of the file are returned as strings, "
"the bytes having been first decoded using a platform-dependent encoding "
"or using the specified encoding if given."
msgstr ""

#: io.open:46 of
msgid ""
"'U' mode is deprecated and will raise an exception in future versions of "
"Python.  It has no effect in Python 3.  Use newline to control universal "
"newlines mode."
msgstr ""

#: io.open:50 of
msgid ""
"buffering is an optional integer used to set the buffering policy. Pass 0"
" to switch buffering off (only allowed in binary mode), 1 to select line "
"buffering (only usable in text mode), and an integer > 1 to indicate the "
"size of a fixed-size chunk buffer.  When no buffering argument is given, "
"the default buffering policy works as follows:"
msgstr ""

#: io.open:56 of
msgid ""
"Binary files are buffered in fixed-size chunks; the size of the buffer is"
" chosen using a heuristic trying to determine the underlying device's "
"\"block size\" and falling back on `io.DEFAULT_BUFFER_SIZE`. On many "
"systems, the buffer will typically be 4096 or 8192 bytes long."
msgstr ""

#: io.open:61 of
msgid ""
"\"Interactive\" text files (files for which isatty() returns True) use "
"line buffering.  Other text files use the policy described above for "
"binary files."
msgstr ""

#: io.open:65 of
msgid ""
"encoding is the name of the encoding used to decode or encode the file. "
"This should only be used in text mode. The default encoding is platform "
"dependent, but any encoding supported by Python can be passed.  See the "
"codecs module for the list of supported encodings."
msgstr ""

#: io.open:70 of
msgid ""
"errors is an optional string that specifies how encoding errors are to be"
" handled---this argument should not be used in binary mode. Pass 'strict'"
" to raise a ValueError exception if there is an encoding error (the "
"default of None has the same effect), or pass 'ignore' to ignore errors. "
"(Note that ignoring encoding errors can lead to data loss.) See the "
"documentation for codecs.register or run 'help(codecs.Codec)' for a list "
"of the permitted encoding error strings."
msgstr ""

#: io.open:78 of
msgid ""
"newline controls how universal newlines works (it only applies to text "
"mode). It can be None, '', '\\n', '\\r', and '\\r\\n'.  It works as "
"follows:"
msgstr ""

#: io.open:82 of
msgid ""
"On input, if newline is None, universal newlines mode is enabled. Lines "
"in the input can end in '\\n', '\\r', or '\\r\\n', and these are "
"translated into '\\n' before being returned to the caller. If it is '', "
"universal newline mode is enabled, but line endings are returned to the "
"caller untranslated. If it has any of the other legal values, input lines"
" are only terminated by the given string, and the line ending is returned"
" to the caller untranslated."
msgstr ""

#: io.open:90 of
msgid ""
"On output, if newline is None, any '\\n' characters written are "
"translated to the system default line separator, os.linesep. If newline "
"is '' or '\\n', no translation takes place. If newline is any of the "
"other legal values, any '\\n' characters written are translated to the "
"given string."
msgstr ""

#: io.open:96 of
msgid ""
"If closefd is False, the underlying file descriptor will be kept open "
"when the file is closed. This does not work when a file name is given and"
" must be True in that case."
msgstr ""

#: io.open:100 of
msgid ""
"A custom opener can be used by passing a callable as *opener*. The "
"underlying file descriptor for the file object is then obtained by "
"calling *opener* with (*file*, *flags*). *opener* must return an open "
"file descriptor (passing os.open as *opener* results in functionality "
"similar to passing None)."
msgstr ""

#: io.open:106 of
msgid ""
"open() returns a file object whose type depends on the mode, and through "
"which the standard file operations such as reading and writing are "
"performed. When open() is used to open a file in a text mode ('w', 'r', "
"'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open a file "
"in a binary mode, the returned class varies: in read binary mode, it "
"returns a BufferedReader; in write binary and append binary modes, it "
"returns a BufferedWriter, and in read/write mode, it returns a "
"BufferedRandom."
msgstr ""

#: io.open:115 of
msgid ""
"It is also possible to use a string or bytearray as a file for both "
"reading and writing. For strings StringIO can be used like a file opened "
"in a text mode, and for bytes a BytesIO can be used like a file opened in"
" a binary mode."
msgstr ""

#: aiomisc.io.AsyncTextFileIO:1 of
msgid ""
"Bases: :class:`aiomisc.io.AsyncFileIOBase`, "
":class:`aiomisc.io.AsyncTextFileIOBase`"
msgstr ""

#: aiomisc.iterator_wrapper.IteratorWrapper:1
#: aiomisc.thread_pool.IteratorWrapperSeparate:1 of
msgid "Bases: :class:`AsyncIterator`"
msgstr ""

#: aiomisc.periodic.PeriodicCallback:3 of
msgid ""
"When the periodic function executes longer then execution interval a next"
" call will be skipping and warning will be logged."
msgstr ""

#: aiomisc.pool.ContextManager:1 of
msgid "Bases: :class:`AsyncContextManager`"
msgstr ""

#: aiomisc.pool.PoolBase:1 of
msgid "Bases: :class:`abc.ABC`"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:1 of
msgid "Bases: :class:`concurrent.futures._base.Executor`"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:1
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:1 of
msgid "Clean-up the resources associated with the Executor."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:3
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:3 of
msgid ""
"It is safe to call this method several times. Otherwise, no other methods"
" can be called after this one."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:11
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "Args:"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:8
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid "wait: If True then shutdown will not return until all running"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:8
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid ""
"futures have finished executing and the resources used by the executor "
"have been reclaimed."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:11
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "cancel_futures: If True then shutdown will cancel all pending"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.shutdown:11
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "futures. Futures that are completed or running will not be cancelled."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.submit:1
#: aiomisc.thread_pool.ThreadPoolExecutor.submit:1 of
msgid "Submit blocking function to the pool"
msgstr ""

#: aiomisc.thread_pool.ThreadPoolException:1 of
msgid "Bases: :class:`RuntimeError`"
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor:1 of
msgid "Bases: :class:`concurrent.futures.thread.ThreadPoolExecutor`"
msgstr ""

#: aiomisc.thread_pool.WorkItem:1 of
msgid "Bases: :class:`aiomisc.thread_pool.WorkItemBase`"
msgstr ""

#: aiomisc.thread_pool.WorkItem:1 aiomisc.thread_pool.WorkItemBase:1 of
msgid "Create new instance of WorkItemBase(func, args, kwargs, future, loop)"
msgstr ""

#: aiomisc.thread_pool.WorkItemBase:1 of
msgid "Bases: :class:`tuple`"
msgstr ""

#: ../../docstring aiomisc.thread_pool.WorkItemBase.args:1 of
msgid "Alias for field number 1"
msgstr ""

#: ../../docstring aiomisc.thread_pool.WorkItemBase.func:1 of
msgid "Alias for field number 0"
msgstr ""

#: ../../docstring aiomisc.thread_pool.WorkItemBase.future:1 of
msgid "Alias for field number 3"
msgstr ""

#: ../../docstring aiomisc.thread_pool.WorkItemBase.kwargs:1 of
msgid "Alias for field number 2"
msgstr ""

#: ../../docstring aiomisc.thread_pool.WorkItemBase.loop:1 of
msgid "Alias for field number 4"
msgstr ""

#: aiomisc.utils.awaitable:1 of
msgid ""
"Decorator wraps function and returns a function which returns awaitable "
"object. In case than a function returns a future, the original future "
"will be returned. In case then the function returns a coroutine, the "
"original coroutine will be returned. In case than function returns non-"
"awaitable object, it's will be wrapped to a new coroutine which just "
"returns this object. It's useful when you don't want to check function "
"result before use it in ``await`` expression."
msgstr ""

#: aiomisc.utils.bind_socket:1 of
msgid ""
"Bind socket and set ``setblocking(False)`` for just created socket. This "
"detects ``address`` format and select socket family automatically."
msgstr ""

#: aiomisc.utils.bind_socket:4 of
msgid "which will be passed to stdlib's socket constructor (optional)"
msgstr ""

#: aiomisc.utils.bind_socket:5 of
msgid "bind address"
msgstr ""

#: aiomisc.utils.bind_socket:6 of
msgid "bind port"
msgstr ""

#: aiomisc.utils.bind_socket:7 of
msgid "Tuple of pairs which contain socket option to set and the option value."
msgstr ""

#: aiomisc.utils.bind_socket:9 of
msgid "set socket.SO_REUSEADDR"
msgstr ""

#: aiomisc.utils.bind_socket:10 of
msgid "set socket.SO_REUSEPORT"
msgstr ""

#: aiomisc.utils.bind_socket:11 of
msgid "protocol name which will be logged after binding"
msgstr ""

#: aiomisc.utils.bind_socket aiomisc.worker_pool.pool.WorkerPool.create_task of
msgid "Returns"
msgstr ""

#: aiomisc.utils.bind_socket:12 of
msgid "socket.socket"
msgstr ""

#: aiomisc.utils.cancel_tasks:1 of
msgid "All passed tasks will be cancelled and a new task will be returned."
msgstr ""

#: aiomisc.utils.cancel_tasks:3 of
msgid "tasks which will be cancelled"
msgstr ""

#: aiomisc.utils.chunk_list:1 of
msgid "Split list or generator by chunks with fixed maximum size."
msgstr ""

#: aiomisc.utils.create_default_event_loop:1 of
msgid "Creates an event loop and thread pool executor"
msgstr ""

#: aiomisc.utils.create_default_event_loop:3 of
msgid "thread pool maximal size"
msgstr ""

#: aiomisc.utils.create_default_event_loop:4 of
msgid "event loop policy"
msgstr ""

#: aiomisc.utils.create_default_event_loop:5 of
msgid "set ``loop.set_debug(True)`` if True"
msgstr ""

#: aiomisc.utils.select:1 of
msgid "awaitable objects"
msgstr ""

#: aiomisc.utils.select:2 of
msgid "if True exception will not be raised just returned as result"
msgstr ""

#: aiomisc.utils.select:4 of
msgid "cancel unfinished coroutines (default True)"
msgstr ""

#: aiomisc.utils.select:5 of
msgid "execution timeout"
msgstr ""

#: aiomisc.utils.select:6 of
msgid ""
"when False and ``cancel=True``, unfinished coroutines will be cancelled "
"in the background."
msgstr ""

#: aiomisc.utils.select:8 of
msgid "event loop"
msgstr ""

#: aiomisc.utils.shield:1 of
msgid "Simple and useful decorator for wrap the coroutine to `asyncio.shield`."
msgstr ""

#: aiomisc.version:1 of
msgid "This file is automatically generated by distutils."
msgstr ""

#: ../../source/aiomisc.rst:108
msgid "Module contents"
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool:1 of
msgid ""
"Python has the multiprocessing module with Pool class which implements "
"similar worker pool. The IPC in this case use completely synchronous "
"communication method. This module reimplements the process based worker "
"pool but IPC is completely asynchronous on caller side, meanwhile workers"
" in separate processes aren’t asynchronous."
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool:15 of
msgid "count of processes"
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool:16 of
msgid ""
"maximum tasks in queue waiting for worker. Default is zero that's means "
"unlimited."
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool:18 of
msgid ""
"time which worker pool polling the process when process finished before "
"restart or close pool."
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool:21 of
msgid "Function which executes first time after process will be started."
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool:23 of
msgid "``*args`` for ``initializer`` function"
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool:24 of
msgid "``*kwargs`` for ``initializer`` function"
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool.create_task:1 of
msgid ""
"Sending task to the worker pool queue and returns coroutine which returns"
" the same value as the sent function."
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool.create_task:6 of
msgid ""
"Function and function arguments must be serializable through ``pickle``. "
"Otherwise it's raises an exception."
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool.create_task:9 of
msgid "Function for execution in separate process."
msgstr ""

#: aiomisc.worker_pool.pool.WorkerPool.create_task:10 of
msgid "Function arguments"
msgstr ""

