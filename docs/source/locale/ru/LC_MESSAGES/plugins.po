# Translations template for aiomisc.
# Copyright (C) 2021
# This file is distributed under the same license as the aiomisc project.
# Dmitry Orlov <me@mosquito.su>, 2022.
msgid ""
msgstr ""
"Project-Id-Version:  14\n"
"Report-Msgid-Bugs-To: me@mosquito.su\n"
"POT-Creation-Date: 2024-06-03 23:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dmitry Orlov <me@mosquito.su>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/plugins.rst:2
msgid "Plugins"
msgstr ""

#: ../../source/plugins.rst:4
msgid ""
"aiomisc can be extended with plugins as separate packages. Plugins can "
"enhance aiomisc by mean of signals_."
msgstr ""
"aiomisc можно расширить с помощью плагинов в виде отдельных python "
"пакетов. Плагины взаимодействуют с aiomisc с помощью signals_."

#: ../../source/plugins.rst:9
msgid ""
"To make your plugin discoverable by aiomisc you should add "
"``aiomisc.plugins`` entry to entry to ``entry_points`` argument of "
"``setup`` call in ``setup.py`` of a plugin."
msgstr ""
"Чтобы сделать ваш плагин доступным для обнаружения с помощью aiomisc, вы "
"должны добавить запись ``aiomisc.plugins`` к записи аргумента "
"``entry_points`` вызова ``setup`` в ``setup.py`` вашего python пакета."

#: ../../source/plugins.rst:13
msgid ""
"# setup.py\n"
"\n"
"setup(\n"
"    # ...\n"
"    entry_points={\n"
"        \"aiomisc\": [\"myplugin = aiomisc_myplugin.plugin\"]\n"
"    },\n"
"    # ...\n"
")"
msgstr ""

#: ../../source/plugins.rst:25
msgid "If you use `pyproject.toml` you might define it like this:"
msgstr "В случае `pyproject.toml` можно это описать вот-так:"

#: ../../source/plugins.rst:27
msgid ""
"[tool.poetry.plugins.aiomisc]\n"
"myplugin = \"aiomisc_myplugin.plugin\""
msgstr ""

#: ../../source/plugins.rst:33
msgid ""
"Modules provided in ``entry_points`` should have ``setup`` function. "
"These functions would be called by aiomisc and must contain signals "
"connecting."
msgstr ""
"Модули, представленные в `entry_points``, должны иметь функцию ``setup``."
" Эти функции будут вызываться aiomisc и должны поддерживать сигналы."

#: ../../source/plugins.rst:36
msgid ""
"If the services are started dynamically, the attached functions will run "
"every time the services are started and stopped, however, only services "
"that are currently starting or stopping will be in the ``services`` "
"parameter."
msgstr ""
"Если сервисы запускаются динамически, присоединенные функции будут "
"выполняться каждый раз при запуске и остановке служб, однако только те "
"службы, которые в данный момент запускаются или останавливаются, будут в "
"параметре services."

#: ../../source/plugins.rst:40
msgid ""
"# Content of: ``aiomisc_myplugin/plugin.py``\n"
"from typing import Tuple\n"
"from threading import Event\n"
"\n"
"import aiomisc\n"
"\n"
"\n"
"event = Event()\n"
"# Will be shown in ``python -m aiomisc.plugins``\n"
"__doc__ = \"Example plugin\"\n"
"\n"
"\n"
"async def hello(\n"
"    *,\n"
"    entrypoint: aiomisc.Entrypoint,\n"
"    services: Tuple[aiomisc.Service, ...]\n"
") -> None:\n"
"    print('Hello from aiomisc plugin')\n"
"    event.set()\n"
"\n"
"\n"
"def setup() -> None:\n"
"    \"\"\"\n"
"    This code will be called by loading plugins declared in\n"
"    ``pyproject.toml`` or ``setup.py``.\n"
"    \"\"\"\n"
"    aiomisc.Entrypoint.PRE_START.connect(hello)\n"
"\n"
"# Content of: ``my_plugin_example.py``\n"
"# ======================================================================\n"
"# The code below is not related to the plugin, but serves to demonstrate\n"
"# how it works.\n"
"# ======================================================================\n"
"def main():\n"
"    \"\"\" some function in user code \"\"\"\n"
"\n"
"    # This function will be called by aiomisc.plugin module\n"
"    # in this example it's just for demonstration.\n"
"    setup()\n"
"\n"
"    assert not event.is_set()\n"
"\n"
"    with aiomisc.entrypoint() as loop:\n"
"        pass\n"
"\n"
"    assert event.is_set()\n"
"\n"
"main()\n"
"\n"
"# remove the plugin on when unneeded\n"
"aiomisc.entrypoint.PRE_START.disconnect(hello)"
msgstr ""
"# Содержимое: ``aiomisc_myplugin/plugin.py``\n"
"from typing import Tuple\n"
"from threading import Event\n"
"\n"
"import aiomisc\n"
"\n"
"\n"
"event = Event()\n"
"# Будет показано в ``python -m aiomisc.plugins``\n"
"__doc__ = \"Пример плагина\"\n"
"\n"
"\n"
"async def hello(\n"
"    *,\n"
"    entrypoint: aiomisc.Entrypoint,\n"
"    services: Tuple[aiomisc.Service, ...]\n"
") -> None:\n"
"    print('Hello from aiomisc plugin')\n"
"    event.set()\n"
"\n"
"\n"
"def setup() -> None:\n"
"    \"\"\"\n"
"    Этот код будет вызван при загрузке плагинов, объявленных в\n"
"    ``pyproject.toml`` или ``setup.py``.\n"
"    \"\"\"\n"
"    aiomisc.Entrypoint.PRE_START.connect(hello)\n"
"\n"
"# Содержимое: ``my_plugin_example.py``\n"
"# ======================================================================\n"
"# Код ниже не относится к плагину, а служит для демонстрации\n"
"# его работы.\n"
"# ======================================================================\n"
"def main():\n"
"    \"\"\" некоторая функция в пользовательском коде \"\"\"\n"
"\n"
"    # Эта функция будет вызвана модулем aiomisc.plugin\n"
"    # в этом примере только для демонстрации.\n"
"    setup()\n"
"\n"
"    assert not event.is_set()\n"
"\n"
"    with aiomisc.entrypoint() as loop:\n"
"        pass\n"
"\n"
"    assert event.is_set()\n"
"\n"
"main()\n"
"\n"
"# удаление плагина, когда он больше не нужен\n"
"aiomisc.entrypoint.PRE_START.disconnect(hello)"

#: ../../source/plugins.rst:96
msgid "The following signals are available in total:"
msgstr "Список доступных сигналов такой:"

#: ../../source/plugins.rst:98
msgid "``Entrypoint.PRE_START`` - Will be called before `starting` services."
msgstr "``Entrypoint.PRE_START`` - Запускается перед `стартом` сервисов."

#: ../../source/plugins.rst:99
msgid "``Entrypoint.PRE_STOP`` - Will be called before `stopping` services."
msgstr "``Entrypoint.PRE_STOP`` - Запускается перед `остановкой` сервисов."

#: ../../source/plugins.rst:100
msgid ""
"``Entrypoint.POST_START`` - Will be called after services has been "
"`started`."
msgstr "``Entrypoint.POST_START`` - Запускается после `старта` сервисов."

#: ../../source/plugins.rst:101
msgid ""
"``Entrypoint.POST_STOP`` - Will be called after services has been "
"`stopped`."
msgstr "``Entrypoint.POST_STOP`` - Запускается после `остановки` сервисов"

#: ../../source/plugins.rst:105
msgid "List available plugins"
msgstr "Список доступный плагинов"

#: ../../source/plugins.rst:107
msgid ""
"To see a list of all available plugins, you can call from the command "
"line ``python -m aiomisc.plugins``:"
msgstr ""
"Чтобы просмотреть список всех доступных плагинов, вы можете вызвать из "
"командной строки ``python -m aiomisc.plugins``:"

#: ../../source/plugins.rst:110
msgid ""
"$ python -m aiomisc.plugins\n"
"[11:14:42] INFO     Available 1 plugins.\n"
"           INFO     'systemd_watchdog' - Adds SystemD watchdog support to"
" the entrypoint.\n"
"systemd_watchdog"
msgstr ""

#: ../../source/plugins.rst:117
msgid ""
"You can also change the behavior and output of the list of modules. To do"
" this, there are the following flags:"
msgstr ""
"Вы также можете изменить поведение и вывод списка модулей. Для этого "
"существуют следующие флаги:"

#: ../../source/plugins.rst:120
msgid ""
"$ python3 -m aiomisc.plugins -h\n"
"usage: python3 -m aiomisc.plugins [-h] [-q] [-n]\n"
"                                  [-l "
"{critical,error,warning,info,debug,notset}]\n"
"                                  [-F "
"{stream,color,json,syslog,plain,journald,rich,rich_tb}]\n"
"\n"
"optional arguments:\n"
"  -h, --help            show this help message and exit\n"
"  -q, -s, --quiet, --silent\n"
"                        Disable logs and just output plugin-list, alias "
"for\n"
"                        --log-level=critical\n"
"  -n, --no-output       Disable output plugin-list to the stdout\n"
"  -l {critical,error,warning,info,debug,notset}, --log-level "
"{critical,error,warning,info,debug,notset}\n"
"                        Logging level\n"
"  -F {stream,color,json,syslog,plain,journald,rich,rich_tb}, --log-format"
" {stream,color,json,syslog,plain,journald,rich,rich_tb}\n"
"                        Logging format"
msgstr ""

#: ../../source/plugins.rst:138
msgid "Here are some run examples."
msgstr "Вот несколько примеров запуска."

#: ../../source/plugins.rst:140
msgid ""
"$ python3 -m aiomisc.plugins -n\n"
"[12:25:57] INFO     Available 1 plugins.\n"
"           INFO     'systemd_watchdog' - Adds SystemD watchdog support to"
" the entrypoint."
msgstr ""

#: ../../source/plugins.rst:146
msgid "This prints human-readable list of plugins and its descriptions."
msgstr "Этот пример, печатает удобочитаемый список плагинов и их описания."

#: ../../source/plugins.rst:149
msgid ""
"$ python3 -m aiomisc.plugins -s\n"
"systemd_watchdog"
msgstr ""

#: ../../source/plugins.rst:154
msgid "This useful for ``grep`` or other pipelining tools."
msgstr "Это полезно для ``grep`` или других утилит."

#: ../../source/plugins.rst:156
msgid ""
"The default prints both, the human-readable log to stderr and the list of"
" plugins to stdout, so you can use this without options in a pipeline, "
"and read the list to stderr."
msgstr ""
"По умолчанию печатается человекочитаемый лог в stderr, и список плагинов "
"в stdout, поэтому можно использовать это без параметров в конвейере, и "
"прочитать список в stderr."
