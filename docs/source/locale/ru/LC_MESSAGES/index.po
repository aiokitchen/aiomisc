# Translations template for aiomisc.
# Copyright (C) 2021
# This file is distributed under the same license as the aiomisc project.
# Dmitry Orlov <me@mosquito.su>, 2022.
msgid ""
msgstr ""
"Project-Id-Version:  14\n"
"Report-Msgid-Bugs-To: me@mosquito.su\n"
"POT-Creation-Date: 2023-01-20 13:36+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Dmitry Orlov <me@mosquito.su>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/index.rst:2
msgid "aiomisc - miscellaneous utils for asyncio"
msgstr "aiomisc - это библиотека с различными утилитами для asyncio"

#: ../../source/index.rst:-1
msgid "Coveralls"
msgstr ""

#: ../../source/index.rst:-1
msgid "Actions"
msgstr ""

#: ../../source/index.rst:-1
msgid "Latest Version"
msgstr "Актуальная версия"

#: ../../source/index.rst:26
msgid ""
"As a programmer, you are no stranger to the challenges that come with "
"building and maintaining software applications. One area that can be "
"particularly difficult is making architecture of the asynchronous I/O "
"software."
msgstr ""
"Вам, как программисту, знакомы проблемы, связанные с дизайном и "
"обслуживанием программ. Одним из мест, которое может "
"быть особенно сложным, является создание архитектуры программы, "
"использующего асинхронный ввод-вывод."

#: ../../source/index.rst:30
msgid ""
"This is where ``aiomisc`` comes in. It is a Python library that provides "
"a collection of utility functions and classes for working with "
"asynchronous I/O in a more intuitive and efficient way. It is built on "
"top of the ``asyncio`` library and is designed to make it easier for "
"developers to write asynchronous code that is both reliable and scalable."
msgstr ""
"Вот тут на сцену выходит ``aiomisc``. Это библиотека Python, которая "
"предоставляет набор служебных функций и классов для работы с асинхронным "
"IO более интуитивно понятным и эффективным способом. Она построена "
"используя библиотеку asyncio и предназначена для облегчения написания "
"асинхронного кода разработчиками, который является надежным и масштабируемым."

#: ../../source/index.rst:36
msgid ""
"With ``aiomisc``, you can take advantage of powerful features like "
":doc:`worker pools </worker_pool>`, :doc:`connection pools </pool>`, "
":doc:`circuit breaker pattern </circuit_breaker>`, and retry mechanisms "
"such as :doc:`asyncbackoff </async_backoff>` and :ref:`asyncretry "
"<asyncretry>` to make your asyncio code more robust and easier to "
"maintain. In this documentation, we'll take a closer look at what "
"``aiomisc`` has to offer and how it can help you streamline your asyncio "
"service development."
msgstr ""
"С aiomisc вы можете воспользоваться такими мощными функциями, как: "
":doc:`worker пул </worker_pool>`, :doc:`connection пул </pool>`, "
":doc:`шаблон «предохранитель» </circuit_breaker>`, и механизмы повторов "
"такие как :doc:`asyncbackoff </async_backoff>` и :ref:`asyncretry "
"<asyncretry>` чтобы сделать ваш асинхронный код более надежным и простым "
"в обслуживании. В этой документации мы более подробно рассмотрим, что "
"может предложить ``aiomisc`` и как он может помочь вам упростить "
"разработку сервисов с asyncio."

#: ../../source/index.rst:46
msgid "Installation"
msgstr "Установка"

#: ../../source/index.rst:48
msgid ""
"Installation is possible in standard ways, such as PyPI or installation "
"from a git repository directly."
msgstr ""
"Возможна установка стандартными способами, такими как PyPI или установка "
"из репозитория git напрямую."

#: ../../source/index.rst:51
msgid "Installing from PyPI_:"
msgstr "Установка с PyPI_:"

#: ../../source/index.rst:53
msgid "pip3 install aiomisc"
msgstr ""

#: ../../source/index.rst:57
msgid "Installing from github.com:"
msgstr "Установка из репозитория на github.com:"

#: ../../source/index.rst:59
msgid ""
"# Using git tool\n"
"pip3 install git+https://github.com/aiokitchen/aiomisc.git\n"
"\n"
"# Alternative way using http\n"
"pip3 install \\\n"
"    https://github.com/aiokitchen/aiomisc/archive/refs/heads/master.zip"
msgstr ""

#: ../../source/index.rst:68
msgid ""
"The package contains several extras and you can install additional "
"dependencies if you specify them in this way."
msgstr ""
"Пакет содержит несколько дополнений, и вы можете установить "
"дополнительные зависимости, если вы укажете их таким образом."

#: ../../source/index.rst:71
msgid "With uvloop_:"
msgstr "Вместе с uvloop_"

#: ../../source/index.rst:73
msgid "pip3 install \"aiomisc[uvloop]\""
msgstr ""

#: ../../source/index.rst:78
msgid "With aiohttp_:"
msgstr "Вместе с aiohttp_:"

#: ../../source/index.rst:80
msgid "pip3 install \"aiomisc[aiohttp]\""
msgstr ""

#: ../../source/index.rst:84
msgid "Complete table of extras bellow:"
msgstr "Полная таблица дополнений ниже:"

#: ../../source/index.rst:87
msgid "example"
msgstr "пример"

#: ../../source/index.rst:87
msgid "description"
msgstr "описание"

#: ../../source/index.rst:89
msgid "``pip install aiomisc[aiohttp]``"
msgstr ""

#: ../../source/index.rst:89
msgid "For running aiohttp_ applications."
msgstr "Для запуска приложений написанных с aiohttp_."

#: ../../source/index.rst:91
msgid "``pip install aiomisc[asgi]``"
msgstr ""

#: ../../source/index.rst:91
msgid "For running ASGI_ applications"
msgstr "Для запуска ASGI_ приложений"

#: ../../source/index.rst:93
msgid "``pip install aiomisc[carbon]``"
msgstr ""

#: ../../source/index.rst:93
msgid "Sending metrics to carbon_ (part of graphite_)"
msgstr "Чтобы посылать метрики в carbon_ (часть graphite_)"

#: ../../source/index.rst:95
msgid "``pip install aiomisc[cron]``"
msgstr ""

#: ../../source/index.rst:95
msgid "use croniter_ for scheduling tasks"
msgstr "планирование задач с библиотекой croniter_"

#: ../../source/index.rst:97
msgid "``pip install aiomisc[raven]``"
msgstr ""

#: ../../source/index.rst:97
msgid "Sending exceptions to sentry_ using raven_"
msgstr "Чтобы посылать исключения в sentry_ используя raven_"

#: ../../source/index.rst:99
msgid "``pip install aiomisc[rich]``"
msgstr ""

#: ../../source/index.rst:99
msgid "You might using rich_ for logging"
msgstr "Можете использовать rich_ для логирования"

#: ../../source/index.rst:101
msgid "``pip install aiomisc[uvloop]``"
msgstr ""

#: ../../source/index.rst:101
msgid "use uvloop_ as a default event loop"
msgstr "используйте uvloop_ как основной event-loop"

#: ../../source/index.rst:115
msgid "You can combine extras values by separating them with commas, for example:"
msgstr "Вы можете комбинировать эти значения разделяя их запятыми, пример:"

#: ../../source/index.rst:117
msgid "pip3 install \"aiomisc[aiohttp,cron,rich,uvloop]\""
msgstr ""

#: ../../source/index.rst:123
msgid "Quick Start"
msgstr "Быстрый старт"

#: ../../source/index.rst:125
msgid ""
"This section will cover how this library creates and uses the event loop "
"and creates services. For more details see :doc:`/tutorial` section, and "
"you can always refer to the :doc:`/modules` and :doc:`/api/index` "
"sections for help."
msgstr ""
"В этом разделе будет рассказано, как эта библиотека создает и использует "
"цикл обработки событий и создает службы. Конечно, обо всем тут не "
"напишешь, но о многом можно прочитать в разделе :doc:`/tutorial`, и "
"всегда можно обратиться к разделу :doc:`/modules` и разделу "
":doc:`/api/index` для справки."

#: ../../source/index.rst:130
msgid "Event-loop and entrypoint"
msgstr "Eventloop и entrypoint"

#: ../../source/index.rst:132
msgid "Let's look at this simple example first:"
msgstr "Сначала рассмотрим этот простой пример:"

#: ../../source/index.rst:134
msgid ""
"import asyncio\n"
"import logging\n"
"\n"
"import aiomisc\n"
"\n"
"log = logging.getLogger(__name__)\n"
"\n"
"async def main():\n"
"    log.info('Starting')\n"
"    await asyncio.sleep(3)\n"
"    log.info('Exiting')\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    with aiomisc.entrypoint(log_level=\"info\", log_format=\"color\") as "
"loop:\n"
"        loop.run_until_complete(main())"
msgstr ""

#: ../../source/index.rst:154
msgid ""
"This code declares an asynchronous ``main()`` function that exits for 3 "
"seconds. It would seem nothing interesting, but the whole point is in the"
" ``entrypoint``."
msgstr ""
"Этот код объявляет асинхронную функцию ``main()``, которая завершается "
"через 3 секунды. Казалось бы, ничего интересного, но все дело в "
"``entrypoint``."

#: ../../source/index.rst:158

msgid ""
"At the first glance the ``entrypoint`` did not do much, just creates an "
"event-loop and transfers control to the user. However, under the hood, "
"the logger is configured in a separate thread, a pool of threads is "
"created, services are started, but more on that later as there are no "
"services in this example."
msgstr ""
"Что делает ``entrypoint``, казалось бы не так уж и много, она создает "
"event-loop и передает управление пользователю. Однако под капотом "
"настраивается журналирование в отдельном потоке, создается пул потоков, "
"запускаются сервисы, но об этом позже и сервисов в данном примере нет."

#: ../../source/index.rst:164
msgid ""
"Alternatively, you can choose not to use an ``entrypoint``, just create "
"an event-loop and set it as a default for current thread:"
msgstr ""
"В принципе вы можете не использовать точку входа, а просто создать "
"eventloop и установите его по умолчанию для текущего потока:"

#: ../../source/index.rst:167
msgid ""
"import asyncio\n"
"import aiomisc\n"
"\n"
"# * Installs uvloop event loop is it's has been installed.\n"
"# * Creates and set `aiomisc.thread_pool.ThreadPoolExecutor`\n"
"#   as a default executor\n"
"# * Sets just created event-loop as a current event-loop for this thread."
"\n"
"aiomisc.new_event_loop()\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(1)\n"
"\n"
"if __name__ == '__main__':\n"
"    loop = asyncio.get_event_loop()\n"
"    loop.run_until_complete(main())"
msgstr ""

#: ../../source/index.rst:186
msgid ""
"The example above is useful if your code is already using an implicitly "
"created event loop, you will have to modify less code, just add "
"``aiomisc.new_event_loop()`` and all calls to "
"``asyncio.get_event_loop()`` will return the created instance."
msgstr ""
"Приведенный выше пример полезен, если в вашем коде уже неявно "
"используется созданный eventloop, тогда вам придется изменить меньше "
"кода, просто добавьте ``aiomisc.new_event_loop()`` и все вызовы "
"``asyncio.get_event_loop()`` вернет созданный экземпляр."

#: ../../source/index.rst:191
msgid ""
"However, you can do with one call. Following example closes implicitly "
"created asyncio event loop and install a new one:"
msgstr ""
"Однако можно обойтись и одним вызовом. Следующий пример закрывает неявно "
"созданный eventloop asyncio и устанавливает новый:"

#: ../../source/index.rst:194
msgid ""
"import asyncio\n"
"import aiomisc\n"
"\n"
"async def main():\n"
"    await asyncio.sleep(3)\n"
"\n"
"if __name__ == '__main__':\n"
"    loop = aiomisc.new_event_loop()\n"
"    loop.run_until_complete(main())"
msgstr ""

#: ../../source/index.rst:208
msgid "Services"
msgstr "Сервисы"

#: ../../source/index.rst:210
msgid ""
"The main thing that an ``entrypoint`` does is start and gracefully stop "
"services."
msgstr ""
"Главное, что делает точка входа, — это запускает и корректно "
"останавливает «Сервисы»."

#: ../../source/index.rst:213
msgid ""
"The service concept within this library means a class derived from the "
"``aiosmic.Service`` class and implementing the ``async def start(self) ->"
" None:`` method and optionally the ``async def stop(self, exc: Optional[ "
"Exception]) -> None`` method."
msgstr ""
"Концепция «Сервис», в этой библиотеке, означает класс, наследованный от "
"класса ``aiosmic.Service`` и реализующий метод ``async def start(self) ->"
" None`` и, опционально, метод ``async def stop(self, exc: Optional[ "
"Exception]) -> None``."

#: ../../source/index.rst:218
msgid ""
"The concept of stopping a service is not necessarily is pressing "
"``Ctrl+C`` keys by user, it's actually just exiting the ``entrypoint`` "
"context manager."
msgstr ""
"Концепция остановки службы не обязательно заключается в нажатии "
"пользователем клавиш ``Ctrl+C``, на самом деле это просто выход из "
"контекстного менеджера ``entrypoint``."

#: ../../source/index.rst:221
msgid "The example below shows what your service might look like:"
msgstr "Пример ниже иллюстрирует, как может выглядеть ваш сервис:"

#: ../../source/index.rst:223
msgid ""
"from aiomisc import entrypoint, Service\n"
"\n"
"class MyService(Service):\n"
"    async def start(self):\n"
"        do_something_when_start()\n"
"\n"
"    async def stop(self, exc):\n"
"        do_graceful_shutdown()\n"
"\n"
"\n"
"with entrypoint(MyService()) as loop:\n"
"    loop.run_forever()"
msgstr ""

#: ../../source/index.rst:238
msgid ""
"The entry point can start as many instances of the service as it likes, "
"and all of them will start concurrently."
msgstr ""
"Точка входа может запускать любое количество экземпляров службы, и все "
"они будут запускаться конкурентно."

#: ../../source/index.rst:241
msgid ""
"There is also a way if the ``start`` method is a payload for a service, "
"and then there is no need to implement the stop method, since the running"
" task with the ``start`` function will be canceled at the stop stage. But"
" in this case, you will have to notify the ``entrypoint`` that the "
"initialization of the service instance is complete and it can continue."
msgstr ""
"Также есть способ, если метод ``start`` является полезной нагрузкой для "
"сервиса, и тогда нет необходимости реализовывать метод ``stop``, так как "
"задача с функцией ``start`` будет отменена на этапе выхода из entrypoint."
" Но в этом случае вам придется уведомить ``entrypoint`` о том, что "
"инициализация экземпляра службы завершена и ее можно продолжить."

#: ../../source/index.rst:247
msgid "Like this:"
msgstr "Примерно так:"

#: ../../source/index.rst:249
msgid ""
"import asyncio\n"
"from threading import Event\n"
"from aiomisc import entrypoint, Service\n"
"\n"
"event = Event()\n"
"\n"
"class MyService(Service):\n"
"    async def start(self):\n"
"        # Send signal to entrypoint for continue running\n"
"        self.start_event.set()\n"
"        await asyncio.sleep(3600)\n"
"\n"
"\n"
"with entrypoint(MyService()) as loop:\n"
"    assert event.is_set()"
msgstr ""

#: ../../source/index.rst:269
msgid ""
"The ``entrypoint`` passes control to the body of the context manager only"
" after all service instances have started. As mentioned above, a start is"
" considered to be the completion of the ``start`` method or the setting "
"of an start event with ``self.start_event.set()``."
msgstr ""
"``entrypoint`` передает управление телу контекстного менеджера только "
"после того, как все экземпляры службы запущены. Как упоминалось выше, "
"стартом считается завершение метода ``start`` или установка стартового "
"события с помощью ``self.start_event.set()``."

#: ../../source/index.rst:274
msgid ""
"The whole power of this library is in the set of already implemented or "
"abstract services. Such as: :ref:`AIOHTTPService <aiohttp-service>`, "
":ref:`ASGIService <asgi-service>`, :ref:`TCPServer <tcp-server>`, "
":ref:`UDPServer <udp-server>`, :ref:`TCPClient <tcp-client>`, "
":ref:`PeriodicService <periodic-service>`, :ref:`CronService <cron-"
"service>` and so on."
msgstr ""
"Вся мощь этой библиотеки это набор уже реализованных или абстрактных "
"сервисов таких как: :ref:`AIOHTTPService <aiohttp-service>`, "
":ref:`ASGIService <asgi-service>`, :ref:`TCPServer <tcp-server>`, "
":ref:`UDPServer <udp-server>`, :ref:`TCPClient <tcp-client>`, "
":ref:`PeriodicService <periodic-service>`, :ref:`CronService <cron-"
"service>` и так далее."

#: ../../source/index.rst:282
msgid ""
"Unfortunately in this section it is not possible to pay more attention to"
" this, please pay attention to the :doc:`/tutorial` section section, "
"there are more examples and explanations, and of cource you always can "
"find out an answer on the :doc:`/api/index` or in the source code. The "
"authors have tried to make the source code as clear and simple as "
"possible, so feel free to explore it."
msgstr ""
"К сожалению в данном разделе нет возможности уделить этому больше "
"внимания, обратите внимание на раздел :doc:`/tutorial`, там больше "
"примеров и пояснений, ну и конечно вы всегда можете узнать ответ на "
":doc:`/api/index` или в исходном коде. Авторы постарались сделать "
"исходный код максимально понятным и простым, поэтому не стесняйтесь "
"исследовать его."

#: ../../source/index.rst:290
msgid "Versioning"
msgstr "Версионирование"

#: ../../source/index.rst:292
msgid "This software follows `Semantic Versioning`_"
msgstr ""
"Это программное обеспечение следует методологиии `Семантического "
"Версионирования`_"

#: ../../source/index.rst:295
msgid "Summary: it's given a version number MAJOR.MINOR.PATCH, increment the:"
msgstr "Кратко: учитывая номер версии МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ, следует увеличивать:"

#: ../../source/index.rst:297
msgid "MAJOR version when you make incompatible API changes"
msgstr "МАЖОРНУЮ версию, когда сделаны обратно несовместимые изменения API."

#: ../../source/index.rst:298
msgid "MINOR version when you add functionality in a backwards compatible manner"
msgstr ""
"МИНОРНУЮ версию, когда вы добавляете новую функциональность, не нарушая "
"обратной совместимости."

#: ../../source/index.rst:299
msgid "PATCH version when you make backwards compatible bug fixes"
msgstr "ПАТЧ-версию, когда вы делаете обратно совместимые исправления."

#: ../../source/index.rst:300
msgid ""
"Additional labels for pre-release and build metadata are available as "
"extensions to the MAJOR.MINOR.PATCH format."
msgstr ""
"Дополнительные обозначения для предрелизных и билд-метаданных возможны "
"как дополнения к МАЖОРНАЯ.МИНОРНАЯ.ПАТЧ формату."

#: ../../source/index.rst:303
msgid ""
"In this case, the package version is assigned automatically with poem-"
"plugins_, it using on the tag in the repository as a major and minor and "
"the counter, which takes the number of commits between tag to the head of"
" branch."
msgstr ""
"В этом проекте версия пакета назначается автоматически с помощью poem-"
"plugins_, он использует тег в репозитории как МАЖОР и МИНОР, а также "
"счетчик, который берет количество коммитов между тегом и головой ветки."

#: ../../source/index.rst:311
msgid "How to develop?"
msgstr "Как разрабатывать этот проект?"

#: ../../source/index.rst:313
msgid ""
"This project, like most open source projects, is developed by "
"enthusiasts, you can join the development, submit issues, or send your "
"merge requests."
msgstr ""
"Этот проект, как и многие другие open source проекты, разрабатывается "
"энтузиастами, и вы можете присоединиться к разработке, создавайте issues "
"в github или присылайте свои правки как merge request."

#: ../../source/index.rst:316
msgid ""
"In order to start developing in this repository, you need to do the "
"following things."
msgstr ""
"Чтобы начать разработку в этом репозитории, вам необходимо сделать "
"следующее:"

#: ../../source/index.rst:319
msgid "Should be installed:"
msgstr "Должно быть установлено"

#: ../../source/index.rst:321
msgid "Python 3.7+ as ``python3``"
msgstr "Python 3.7+ как ``python3``"

#: ../../source/index.rst:322
msgid "Installed Poetry_ as ``poetry``"
msgstr "Установлен Poetry_ как ``poetry``"

#: ../../source/index.rst:326
msgid "For setting up developer environment just execute:"
msgstr "Для настройки окружения разработчика выполните:"

#: ../../source/index.rst:328
msgid "poetry install"
msgstr ""
